"""
Security Check Script for AQI Prediction System
Verifies that sensitive data is properly secured
"""

import os
import re
from pathlib import Path

def check_security():
    print("=" * 60)
    print("üîí SECURITY CHECK FOR AQI PREDICTION SYSTEM")
    print("=" * 60)
    
    issues_found = []
    warnings = []
    
    # Check if .env file exists
    if os.path.exists('.env'):
        print("‚úÖ .env file found")
        
        # Check .env file size
        env_size = os.path.getsize('.env')
        if env_size > 1000:  # More than 1KB might indicate large secrets
            warnings.append(f".env file is large ({env_size} bytes) - check for unnecessary data")
        else:
            print("‚úÖ .env file size is appropriate")
    else:
        issues_found.append("‚ùå .env file not found")
    
    # Check if .gitignore exists
    if os.path.exists('.gitignore'):
        print("‚úÖ .gitignore file found")
        
        # Check if .env is in .gitignore
        with open('.gitignore', 'r') as f:
            gitignore_content = f.read()
            if '.env' in gitignore_content:
                print("‚úÖ .env is properly ignored in .gitignore")
            else:
                issues_found.append("‚ùå .env is not in .gitignore")
    else:
        issues_found.append("‚ùå .gitignore file not found")
    
    # Check config.py for hardcoded secrets
    if os.path.exists('config.py'):
        with open('config.py', 'r') as f:
            config_content = f.read()
            
        # Check for hardcoded API keys
        hardcoded_patterns = [
            r'API_KEY\s*=\s*["\'][^"\']+["\']',
            r'USERNAME\s*=\s*["\'][^"\']+["\']',
            r'PASSWORD\s*=\s*["\'][^"\']+["\']',
            r'SECRET\s*=\s*["\'][^"\']+["\']',
            r'TOKEN\s*=\s*["\'][^"\']+["\']'
        ]
        
        for pattern in hardcoded_patterns:
            matches = re.findall(pattern, config_content)
            if matches:
                for match in matches:
                    if 'YOUR_' not in match and 'PLACEHOLDER' not in match:
                        issues_found.append(f"‚ùå Hardcoded secret found: {match}")
        
        # Check if environment variables are used
        if 'os.getenv(' in config_content:
            print("‚úÖ Environment variables are properly used in config.py")
        else:
            issues_found.append("‚ùå Environment variables not used in config.py")
    else:
        issues_found.append("‚ùå config.py not found")
    
    # Check for other sensitive files
    sensitive_files = [
        '.env.local', '.env.production', '.env.staging',
        'secrets.json', 'credentials.json', 'config_secrets.py',
        'id_rsa', 'id_ed25519', '*.pem', '*.key'
    ]
    
    for pattern in sensitive_files:
        if '*' in pattern:
            # Handle wildcard patterns
            for file in Path('.').glob(pattern):
                if file.is_file():
                    warnings.append(f"‚ö†Ô∏è  Sensitive file found: {file}")
        else:
            if os.path.exists(pattern):
                warnings.append(f"‚ö†Ô∏è  Sensitive file found: {pattern}")
    
    # Check for large data files that might contain sensitive info
    data_dir = Path('data')
    if data_dir.exists():
        for file in data_dir.iterdir():
            if file.is_file() and file.stat().st_size > 10 * 1024 * 1024:  # 10MB
                warnings.append(f"‚ö†Ô∏è  Large data file: {file} ({file.stat().st_size / 1024 / 1024:.1f} MB)")
    
    # Check for model files that might contain sensitive data
    models_dir = Path('models')
    if models_dir.exists():
        for file in models_dir.iterdir():
            if file.is_file() and file.stat().st_size > 100 * 1024 * 1024:  # 100MB
                warnings.append(f"‚ö†Ô∏è  Large model file: {file} ({file.stat().st_size / 1024 / 1024:.1f} MB)")
    
    # Summary
    print("\n" + "=" * 60)
    print("üîç SECURITY CHECK RESULTS")
    print("=" * 60)
    
    if not issues_found and not warnings:
        print("üéâ PERFECT! No security issues found!")
        print("‚úÖ All sensitive data is properly secured")
    else:
        if issues_found:
            print("\n‚ùå CRITICAL ISSUES FOUND:")
            for issue in issues_found:
                print(f"  {issue}")
        
        if warnings:
            print("\n‚ö†Ô∏è  WARNINGS:")
            for warning in warnings:
                print(f"  {warning}")
    
    # Recommendations
    print("\nüí° SECURITY RECOMMENDATIONS:")
    print("-" * 40)
    print("1. ‚úÖ Never commit .env files to version control")
    print("2. ‚úÖ Use environment variables for all secrets")
    print("3. ‚úÖ Keep .env.example updated with required variables")
    print("4. ‚úÖ Regularly rotate API keys and passwords")
    print("5. ‚úÖ Use strong, unique passwords for each service")
    print("6. ‚úÖ Enable 2FA on all accounts when possible")
    print("7. ‚úÖ Monitor API usage for unusual activity")
    print("8. ‚úÖ Use least privilege principle for API access")
    
    # Check if .env.example exists
    if os.path.exists('.env.example'):
        print("\n‚úÖ .env.example file found - good for team collaboration")
    else:
        print("\n‚ö†Ô∏è  Consider creating .env.example for team collaboration")
    
    print("\n" + "=" * 60)
    
    return len(issues_found) == 0

if __name__ == "__main__":
    is_secure = check_security()
    if is_secure:
        print("üéâ System is SECURE!")
    else:
        print("‚ùå Security issues need to be addressed!") 